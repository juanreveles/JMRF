Imports:{
/* En esta parte se definen las librerias que permiten la utilización de java
dentro de las reglas JAPE */
import java.io.*;
}
/****Etiqueta que se le asigna a la REGLA puede ser cualquier nombre****/

Phase:ASSOCIATIONCASE3

/****Declaracón de la entrada de datos que recibe la REGLA estos datos provienen del Recurso Gazetter "Palabras Reservadas" ****/

Input:keyword Token

/*****Esta fase permite el primer filtro de la Regla, Detecta todas las anotaciones
   pero no permite Repeticiones*****/
   
Options: control =  all debug = false

/****Las siguientes expresiones regulares estan creadas con la finalidad de detectar los 
parametros que contienen los contructores y asi poder realziar su comparacion posteriormente
se creo una Macro con la finalizad de simplificar el codigo y facilitar su entendimiento****/

Macro: PARAMETROS
(
	(
	({Token.kind=="word"})
	|
	({Token.string==","})
	)*
)

/****Nombre de la Regla JAPE****/

Rule: asociacioncase3

/****Sección de la Parte LHS(Lado Izquierdo de la regla) empieza la declaración del patron a detectar con expresiones regulares
 Esta regla detecta el Nombre de la clase que contiene sus constructores, los parametros que reciben los constructores
 y sus intancias contiene hacia los otros objetos, Ejemplo:
 
 ****/   
 
/****EXPRESIONES REGULARES****/
 
   (
   	({keyword.majorType =="class"})
	({Token.kind=="word"}):source
	(({Token.string != "class"})*)
	({Token})
	({keyword.majorType == "tiposclases"})
	({keyword.majorType == "colecciones"})
	(({Token.string =="<"})*)
	({Token}):target
	(({Token.string ==">"})*)
	({Token})
	({Token.string ==";"})
   )
   	

-->

{

/**** Aqui comienza la otra parte de la regla es decir el RHS(Lado Derecho de la Relga) el cual nos permite realizar
el analisis consecuente a la expresiones regulares codificadas en la parte Izquierda, tambien
nos indica el como queremos deplegar los datos que obtnemos****/
/****Las lineas anteriores nos permiten crae un archivo .txt en el cual
se contendran los resultados obtenidos con esta regla¨****/

FileWriter fichero = null;
PrintWriter pw = null;
	try
	{
	fichero = new FileWriter("Relations_info.txt",true);
	pw = new PrintWriter(fichero);
	
/****Creando una variable de tipo anotacion que almacenera los token detectados con las etiquetas de la expresion regular****/
	
AnnotationSet Source = bindings.get("source");
AnnotationSet Target =bindings.get("target");

/**** Declaramos una nueva varible que nos permitira recorren cada uno de los token detectados****/

Annotation target = Target.iterator().next();
Annotation source = Source.iterator().next();

/****Estableceremos las caracteristicas o semantica que debe tener nuestra regla JAPE, esto sera visible solamente si se desea aplicar la regla en la GUI de GATE ****/

FeatureMap features = Factory.newFeatureMap();
features.put("source", source.getFeatures().get("string"));
features.put("target",target.getFeatures().get("string"));
//System.out.println("6"+" "+source.getFeatures().get("string").toString()+" "+target.getFeatures().get("string").toString()+" "+doc.getSourceUrl().toString());
pw.println("6"+" "+source.getFeatures().get("string").toString()+" "+target.getFeatures().get("string").toString()+" "+doc.getSourceUrl().toString());

/**** Utilizacion del metodo outputAs.add que permite crear un boton de seleccion que permite darle click en el y
asi observar los resultados en la GUI, Esto solamente se puede observar si la Regla se Implmenta en la GUI GATE****/


outputAS.add(Source.firstNode(), Source.lastNode(), "AsociaciónSource3",features);
outputAS.add(Target.firstNode(), Target.lastNode(), "AsociaciónTarget3",features);
		
/**** Las siguientes lineas permiten mostrar en pantalla si se genero algun error durante la creacion al archivo que almacena 
los resultados de la expresion regular ****/

	}catch (Exception e)
	{
	System.err.println ("Unable to write to file");
	System.exit(-1);
	}
	finally {
	    try {
	    if (null != fichero){
	    fichero.close();
	    }
	    }catch(Exception e2){
	       	e2.printStackTrace();
		}
		}
	}
	

Rule: asociacioncase4

/****Sección de la Parte LHS(Lado Izquierdo de la regla) empieza la declaración del patron a detectar con expresiones regulares
 Esta regla detecta el Nombre de la clase que contiene sus constructores, los parametros que reciben los constructores
 y sus intancias contiene hacia los otros objetos, Ejemplo:
 
 ****/   
 
/****EXPRESIONES REGULARES****/
 
   (
   	({keyword.majorType =="class"})
	({Token.kind=="word"}):source
	(({Token.string != "class"})*)
	({Token})
	({keyword.majorType == "tiposclases"})
	({keyword.majorType == "colecciones"})
	(({Token.string =="<"}))
	({Token})
	(({Token.string ==">"}))
	({Token})
	({Token.string =="="})
	({keyword.majorType =="instancia"})
	({Token})
	(({Token.string =="<"}))
	({Token}):target
	(({Token.string ==">"}))
   )
   	

-->

{

/**** Aqui comienza la otra parte de la regla es decir el RHS(Lado Derecho de la Relga) el cual nos permite realizar
el analisis consecuente a la expresiones regulares codificadas en la parte Izquierda, tambien
nos indica el como queremos deplegar los datos que obtnemos****/
/****Las lineas anteriores nos permiten crae un archivo .txt en el cual
se contendran los resultados obtenidos con esta regla¨****/

FileWriter fichero = null;
PrintWriter pw = null;
	try
	{
	fichero = new FileWriter("Relations_info.txt",true);
	pw = new PrintWriter(fichero);
	
/****Creando una variable de tipo anotacion que almacenera los token detectados con las etiquetas de la expresion regular****/
	
AnnotationSet Source = bindings.get("source");
AnnotationSet Target =bindings.get("target");

/**** Declaramos una nueva varible que nos permitira recorren cada uno de los token detectados****/

Annotation target = Target.iterator().next();
Annotation source = Source.iterator().next();

/****Estableceremos las caracteristicas o semantica que debe tener nuestra regla JAPE, esto sera visible solamente si se desea aplicar la regla en la GUI de GATE ****/

FeatureMap features = Factory.newFeatureMap();
features.put("source", source.getFeatures().get("string"));
features.put("target",target.getFeatures().get("string"));
//System.out.println("6"+" "+source.getFeatures().get("string").toString()+" "+target.getFeatures().get("string").toString()+" "+doc.getSourceUrl().toString());
pw.println("6"+" "+source.getFeatures().get("string").toString()+" "+target.getFeatures().get("string").toString()+" "+doc.getSourceUrl().toString());

/**** Utilizacion del metodo outputAs.add que permite crear un boton de seleccion que permite darle click en el y
asi observar los resultados en la GUI, Esto solamente se puede observar si la Regla se Implmenta en la GUI GATE****/


outputAS.add(Source.firstNode(), Source.lastNode(), "AsociaciónSource4",features);
outputAS.add(Target.firstNode(), Target.lastNode(), "AsociaciónTarget4",features);
		
/**** Las siguientes lineas permiten mostrar en pantalla si se genero algun error durante la creacion al archivo que almacena 
los resultados de la expresion regular ****/

	}catch (Exception e)
	{
	System.err.println ("Unable to write to file");
	System.exit(-1);
	}
	finally {
	    try {
	    if (null != fichero){
	    fichero.close();
	    }
	    }catch(Exception e2){
	       	e2.printStackTrace();
		}
		}
	}